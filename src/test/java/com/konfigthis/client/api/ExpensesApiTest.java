/*
 * Cleemy Expenses
 * Welcome on the documentation for the CleemyExpenses API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExpenseReceipt;
import com.konfigthis.client.model.ExpenseTempItem;
import com.konfigthis.client.model.ExpenseTempItemAttendees;
import com.konfigthis.client.model.ExpenseTempItemAuthorizedActions;
import com.konfigthis.client.model.ExpenseTempItemCustomFieldsValue;
import com.konfigthis.client.model.ExpenseTempItemMileage;
import com.konfigthis.client.model.ExpenseTempItemOriginalTransaction;
import com.konfigthis.client.model.ExpenseTempItemProcessedAmounts;
import com.konfigthis.client.model.ExpensesCreateNewTemporaryExpenseResponse;
import com.konfigthis.client.model.ExpensesGetByIdResponse;
import com.konfigthis.client.model.ExpensesListTempItemsResponse;
import com.konfigthis.client.model.ExpensesUpdateExpenseTempItemResponse;
import com.konfigthis.client.model.ModelEnum;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PaymentMethodId;
import com.konfigthis.client.model.SourceId;
import com.konfigthis.client.model.StatusId;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpensesApi
 */
@Disabled
public class ExpensesApiTest {

    private static ExpensesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExpensesApi(apiClient);
    }

    /**
     * Create a new temporary expense
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTemporaryExpenseTest() throws ApiException {
        OffsetDateTime purchasedOn = null;
        Integer expenseNatureId = null;
        Integer id = null;
        ExpenseTempItemOriginalTransaction originalTransaction = null;
        ExpenseTempItemProcessedAmounts processedAmounts = null;
        ExpenseTempItemMileage mileage = null;
        Integer quantity = null;
        Integer effectiveQuantity = null;
        ExpenseTempItemAttendees attendees = null;
        List<Object> axisSections = null;
        Map<String, ExpenseTempItemCustomFieldsValue> customFields = null;
        Object merchant = null;
        Object comment = null;
        List<ExpenseReceipt> expenseReceipts = null;
        ExpenseTempItemAuthorizedActions authorizedActions = null;
        SourceId sourceId = null;
        ModelEnum source = null;
        Integer ownerId = null;
        PaymentMethodId paymentMethodId = null;
        ModelEnum paymentMethod = null;
        StatusId statusId = null;
        ModelEnum status = null;
        ExpensesCreateNewTemporaryExpenseResponse response = api.createNewTemporaryExpense(purchasedOn, expenseNatureId)
                .id(id)
                .originalTransaction(originalTransaction)
                .processedAmounts(processedAmounts)
                .mileage(mileage)
                .quantity(quantity)
                .effectiveQuantity(effectiveQuantity)
                .attendees(attendees)
                .axisSections(axisSections)
                .customFields(customFields)
                .merchant(merchant)
                .comment(comment)
                .expenseReceipts(expenseReceipts)
                .authorizedActions(authorizedActions)
                .sourceId(sourceId)
                .source(source)
                .ownerId(ownerId)
                .paymentMethodId(paymentMethodId)
                .paymentMethod(paymentMethod)
                .statusId(statusId)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an ExpenseTempItem by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Integer expenseTempItemId = null;
        ExpensesGetByIdResponse response = api.getById(expenseTempItemId)
                .execute();
        // TODO: test validations
    }

    /**
     * List ExpenseTempItems (temporary expense)
     *
     * Retrieve a list of &#x60;ExpenseTempItems&#x60;.  The &#x60;purchasedOn&#x60; query parameter can operate comparisons with a given date-time value: - &#x60;?purchasedOn&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?purchasedOn&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?purchasedOn&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?purchasedOn&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTempItemsTest() throws ApiException {
        String paging = null;
        List<Object> ownerId = null;
        String orderBy = null;
        String purchasedOn = null;
        ExpensesListTempItemsResponse response = api.listTempItems(paging)
                .ownerId(ownerId)
                .orderBy(orderBy)
                .purchasedOn(purchasedOn)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an ExpenseTempItem by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExpenseTempItemTest() throws ApiException {
        OffsetDateTime purchasedOn = null;
        Integer expenseNatureId = null;
        Integer expenseTempItemId = null;
        Integer id = null;
        ExpenseTempItemOriginalTransaction originalTransaction = null;
        ExpenseTempItemProcessedAmounts processedAmounts = null;
        ExpenseTempItemMileage mileage = null;
        Integer quantity = null;
        Integer effectiveQuantity = null;
        ExpenseTempItemAttendees attendees = null;
        List<Object> axisSections = null;
        Map<String, ExpenseTempItemCustomFieldsValue> customFields = null;
        Object merchant = null;
        Object comment = null;
        List<ExpenseReceipt> expenseReceipts = null;
        ExpenseTempItemAuthorizedActions authorizedActions = null;
        SourceId sourceId = null;
        ModelEnum source = null;
        Integer ownerId = null;
        PaymentMethodId paymentMethodId = null;
        ModelEnum paymentMethod = null;
        StatusId statusId = null;
        ModelEnum status = null;
        ExpensesUpdateExpenseTempItemResponse response = api.updateExpenseTempItem(purchasedOn, expenseNatureId, expenseTempItemId)
                .id(id)
                .originalTransaction(originalTransaction)
                .processedAmounts(processedAmounts)
                .mileage(mileage)
                .quantity(quantity)
                .effectiveQuantity(effectiveQuantity)
                .attendees(attendees)
                .axisSections(axisSections)
                .customFields(customFields)
                .merchant(merchant)
                .comment(comment)
                .expenseReceipts(expenseReceipts)
                .authorizedActions(authorizedActions)
                .sourceId(sourceId)
                .source(source)
                .ownerId(ownerId)
                .paymentMethodId(paymentMethodId)
                .paymentMethod(paymentMethod)
                .statusId(statusId)
                .status(status)
                .execute();
        // TODO: test validations
    }

}
