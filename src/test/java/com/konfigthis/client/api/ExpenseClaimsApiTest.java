/*
 * Cleemy Expenses
 * Welcome on the documentation for the CleemyExpenses API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExpenseClaimsCreateNewExpenseClaimRequestInner;
import com.konfigthis.client.model.ExpenseClaimsCreateNewExpenseClaimResponse;
import com.konfigthis.client.model.ExpenseClaimsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpenseClaimsApi
 */
@Disabled
public class ExpenseClaimsApiTest {

    private static ExpenseClaimsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExpenseClaimsApi(apiClient);
    }

    /**
     * Create a new ExpenseClaim
     *
     * When a user wants to declare his expenses, he creates an &#x60;ExpenseClaim&#x60;.  An &#x60;ExpenseClaim&#x60; is created by regrouping one or more &#x60;ExpenseTempItems&#x60; and converting them into ExpenseClaimItems.  Once created, an &#x60;ExpenseClaim&#x60; has to be approved by his manager.  Multiple &#x60;ExpenseClaims&#x60; can be created through a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewExpenseClaimTest() throws ApiException {
        ExpenseClaimsCreateNewExpenseClaimResponse response = api.createNewExpenseClaim()
                .execute();
        // TODO: test validations
    }

    /**
     * List ExpenseClaims
     *
     * Retrieve a list of &#x60;ExpenseClaims&#x60;.  The &#x60;declaredOn&#x60; query parameter can operate comparisons with a given date-time value: - &#x60;?declaredOn&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?declaredOn&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?declaredOn&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?declaredOn&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String paging = null;
        List<Integer> ownerId = null;
        String orderBy = null;
        String declaredOn = null;
        String statusId = null;
        ExpenseClaimsListResponse response = api.list(paging)
                .ownerId(ownerId)
                .orderBy(orderBy)
                .declaredOn(declaredOn)
                .statusId(statusId)
                .execute();
        // TODO: test validations
    }

}
