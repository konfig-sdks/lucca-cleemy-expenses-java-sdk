/*
 * Cleemy Expenses
 * Welcome on the documentation for the CleemyExpenses API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExpenseClaimsCreateNewExpenseClaimRequestInner;
import com.konfigthis.client.model.ExpenseClaimsCreateNewExpenseClaimResponse;
import com.konfigthis.client.model.ExpenseClaimsListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpenseClaimsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpenseClaimsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExpenseClaimsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewExpenseClaimCall(List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseClaimsCreateNewExpenseClaimRequestInner;

        // create path and map variables
        String localVarPath = "/api/v3/expenseClaims/creation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewExpenseClaimValidateBeforeCall(List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner, final ApiCallback _callback) throws ApiException {
        return createNewExpenseClaimCall(expenseClaimsCreateNewExpenseClaimRequestInner, _callback);

    }


    private ApiResponse<ExpenseClaimsCreateNewExpenseClaimResponse> createNewExpenseClaimWithHttpInfo(List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createNewExpenseClaimValidateBeforeCall(expenseClaimsCreateNewExpenseClaimRequestInner, null);
        Type localVarReturnType = new TypeToken<ExpenseClaimsCreateNewExpenseClaimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewExpenseClaimAsync(List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner, final ApiCallback<ExpenseClaimsCreateNewExpenseClaimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewExpenseClaimValidateBeforeCall(expenseClaimsCreateNewExpenseClaimRequestInner, _callback);
        Type localVarReturnType = new TypeToken<ExpenseClaimsCreateNewExpenseClaimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewExpenseClaimRequestBuilder {
        private List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner;

        private CreateNewExpenseClaimRequestBuilder() {
        }

        /**
         * Set expenseClaimsCreateNewExpenseClaimRequestInner
         * @param expenseClaimsCreateNewExpenseClaimRequestInner  (optional)
         * @return CreateNewExpenseClaimRequestBuilder
         */
        public CreateNewExpenseClaimRequestBuilder expenseClaimsCreateNewExpenseClaimRequestInner(List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner) {
            this.expenseClaimsCreateNewExpenseClaimRequestInner = expenseClaimsCreateNewExpenseClaimRequestInner;
            return this;
        }

        /**
         * Build call for createNewExpenseClaim
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner = buildBodyParams();
            return createNewExpenseClaimCall(expenseClaimsCreateNewExpenseClaimRequestInner, _callback);
        }

        private List<ExpenseClaimsCreateNewExpenseClaimRequestInner> buildBodyParams() {
            return this.expenseClaimsCreateNewExpenseClaimRequestInner;
        }

        /**
         * Execute createNewExpenseClaim request
         * @return ExpenseClaimsCreateNewExpenseClaimResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseClaimsCreateNewExpenseClaimResponse execute() throws ApiException {
            List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner = buildBodyParams();
            ApiResponse<ExpenseClaimsCreateNewExpenseClaimResponse> localVarResp = createNewExpenseClaimWithHttpInfo(expenseClaimsCreateNewExpenseClaimRequestInner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewExpenseClaim request with HTTP info returned
         * @return ApiResponse&lt;ExpenseClaimsCreateNewExpenseClaimResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseClaimsCreateNewExpenseClaimResponse> executeWithHttpInfo() throws ApiException {
            List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner = buildBodyParams();
            return createNewExpenseClaimWithHttpInfo(expenseClaimsCreateNewExpenseClaimRequestInner);
        }

        /**
         * Execute createNewExpenseClaim request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseClaimsCreateNewExpenseClaimResponse> _callback) throws ApiException {
            List<ExpenseClaimsCreateNewExpenseClaimRequestInner> expenseClaimsCreateNewExpenseClaimRequestInner = buildBodyParams();
            return createNewExpenseClaimAsync(expenseClaimsCreateNewExpenseClaimRequestInner, _callback);
        }
    }

    /**
     * Create a new ExpenseClaim
     * When a user wants to declare his expenses, he creates an &#x60;ExpenseClaim&#x60;.  An &#x60;ExpenseClaim&#x60; is created by regrouping one or more &#x60;ExpenseTempItems&#x60; and converting them into ExpenseClaimItems.  Once created, an &#x60;ExpenseClaim&#x60; has to be approved by his manager.  Multiple &#x60;ExpenseClaims&#x60; can be created through a single request.
     * @return CreateNewExpenseClaimRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewExpenseClaimRequestBuilder createNewExpenseClaim() throws IllegalArgumentException {
        return new CreateNewExpenseClaimRequestBuilder();
    }
    private okhttp3.Call listCall(String paging, List<Integer> ownerId, String orderBy, String declaredOn, String statusId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/expenseClaims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ownerId", ownerId));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (declaredOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("declaredOn", declaredOn));
        }

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        if (statusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusId", statusId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String paging, List<Integer> ownerId, String orderBy, String declaredOn, String statusId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paging' is set
        if (paging == null) {
            throw new ApiException("Missing the required parameter 'paging' when calling list(Async)");
        }

        return listCall(paging, ownerId, orderBy, declaredOn, statusId, _callback);

    }


    private ApiResponse<ExpenseClaimsListResponse> listWithHttpInfo(String paging, List<Integer> ownerId, String orderBy, String declaredOn, String statusId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(paging, ownerId, orderBy, declaredOn, statusId, null);
        Type localVarReturnType = new TypeToken<ExpenseClaimsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String paging, List<Integer> ownerId, String orderBy, String declaredOn, String statusId, final ApiCallback<ExpenseClaimsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(paging, ownerId, orderBy, declaredOn, statusId, _callback);
        Type localVarReturnType = new TypeToken<ExpenseClaimsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String paging;
        private List<Integer> ownerId;
        private String orderBy;
        private String declaredOn;
        private String statusId;

        private ListRequestBuilder(String paging) {
            this.paging = paging;
        }

        /**
         * Set ownerId
         * @param ownerId Comma-separated list of user identifiers (int). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder ownerId(List<Integer> ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy {fieldName},{&#39;asc&#39;||&#39;desc&#39;}. Example: &#x60;?orderby&#x3D;declaredOn,desc&#x60; (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set declaredOn
         * @param declaredOn Examples: &#x60;between,2022-01-01,202201-31&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder declaredOn(String declaredOn) {
            this.declaredOn = declaredOn;
            return this;
        }
        
        /**
         * Set statusId
         * @param statusId 1: Created; 2: PartiallyApproved; 3: Approved; 4: Controlled; 5: ApprovedAndControlled; 6: PaymentInitiated; 7: Paid; 8: Refused; 9: Cancelled. Examples: &#x60;2,3&#x60; or &#x60;PartiallyApproved,Approved&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder statusId(String statusId) {
            this.statusId = statusId;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(paging, ownerId, orderBy, declaredOn, statusId, _callback);
        }


        /**
         * Execute list request
         * @return ExpenseClaimsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseClaimsListResponse execute() throws ApiException {
            ApiResponse<ExpenseClaimsListResponse> localVarResp = listWithHttpInfo(paging, ownerId, orderBy, declaredOn, statusId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ExpenseClaimsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseClaimsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(paging, ownerId, orderBy, declaredOn, statusId);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseClaimsListResponse> _callback) throws ApiException {
            return listAsync(paging, ownerId, orderBy, declaredOn, statusId, _callback);
        }
    }

    /**
     * List ExpenseClaims
     * Retrieve a list of &#x60;ExpenseClaims&#x60;.  The &#x60;declaredOn&#x60; query parameter can operate comparisons with a given date-time value: - &#x60;?declaredOn&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?declaredOn&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?declaredOn&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?declaredOn&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.
     * @param paging {offset},{limit}. Defaults to 0,1000. (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String paging) throws IllegalArgumentException {
        if (paging == null) throw new IllegalArgumentException("\"paging\" is required but got null");
            

        return new ListRequestBuilder(paging);
    }
}
