/*
 * Cleemy Expenses
 * Welcome on the documentation for the CleemyExpenses API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExpenseReceipt;
import com.konfigthis.client.model.ExpenseTempItem;
import com.konfigthis.client.model.ExpenseTempItemAttendees;
import com.konfigthis.client.model.ExpenseTempItemAuthorizedActions;
import com.konfigthis.client.model.ExpenseTempItemCustomFieldsValue;
import com.konfigthis.client.model.ExpenseTempItemMileage;
import com.konfigthis.client.model.ExpenseTempItemOriginalTransaction;
import com.konfigthis.client.model.ExpenseTempItemProcessedAmounts;
import com.konfigthis.client.model.ExpensesCreateNewTemporaryExpenseResponse;
import com.konfigthis.client.model.ExpensesGetByIdResponse;
import com.konfigthis.client.model.ExpensesListTempItemsResponse;
import com.konfigthis.client.model.ExpensesUpdateExpenseTempItemResponse;
import com.konfigthis.client.model.ModelEnum;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PaymentMethodId;
import com.konfigthis.client.model.SourceId;
import com.konfigthis.client.model.StatusId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpensesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpensesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExpensesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTemporaryExpenseCall(ExpenseTempItem expenseTempItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseTempItem;

        // create path and map variables
        String localVarPath = "/api/v3/expenseTempItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTemporaryExpenseValidateBeforeCall(ExpenseTempItem expenseTempItem, final ApiCallback _callback) throws ApiException {
        return createNewTemporaryExpenseCall(expenseTempItem, _callback);

    }


    private ApiResponse<ExpensesCreateNewTemporaryExpenseResponse> createNewTemporaryExpenseWithHttpInfo(ExpenseTempItem expenseTempItem) throws ApiException {
        okhttp3.Call localVarCall = createNewTemporaryExpenseValidateBeforeCall(expenseTempItem, null);
        Type localVarReturnType = new TypeToken<ExpensesCreateNewTemporaryExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTemporaryExpenseAsync(ExpenseTempItem expenseTempItem, final ApiCallback<ExpensesCreateNewTemporaryExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTemporaryExpenseValidateBeforeCall(expenseTempItem, _callback);
        Type localVarReturnType = new TypeToken<ExpensesCreateNewTemporaryExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTemporaryExpenseRequestBuilder {
        private final OffsetDateTime purchasedOn;
        private final Integer expenseNatureId;
        private Integer id;
        private ExpenseTempItemOriginalTransaction originalTransaction;
        private ExpenseTempItemProcessedAmounts processedAmounts;
        private ExpenseTempItemMileage mileage;
        private Integer quantity;
        private Integer effectiveQuantity;
        private ExpenseTempItemAttendees attendees;
        private List<Object> axisSections;
        private Map<String, ExpenseTempItemCustomFieldsValue> customFields;
        private Object merchant;
        private Object comment;
        private List<ExpenseReceipt> expenseReceipts;
        private ExpenseTempItemAuthorizedActions authorizedActions;
        private SourceId sourceId;
        private ModelEnum source;
        private Integer ownerId;
        private PaymentMethodId paymentMethodId;
        private ModelEnum paymentMethod;
        private StatusId statusId;
        private ModelEnum status;

        private CreateNewTemporaryExpenseRequestBuilder(OffsetDateTime purchasedOn, Integer expenseNatureId) {
            this.purchasedOn = purchasedOn;
            this.expenseNatureId = expenseNatureId;
        }

        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set originalTransaction
         * @param originalTransaction  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder originalTransaction(ExpenseTempItemOriginalTransaction originalTransaction) {
            this.originalTransaction = originalTransaction;
            return this;
        }
        
        /**
         * Set processedAmounts
         * @param processedAmounts  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder processedAmounts(ExpenseTempItemProcessedAmounts processedAmounts) {
            this.processedAmounts = processedAmounts;
            return this;
        }
        
        /**
         * Set mileage
         * @param mileage  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder mileage(ExpenseTempItemMileage mileage) {
            this.mileage = mileage;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity The quantity when the expense type is &#39;Quantity&#39;. (optional, default to 1)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set effectiveQuantity
         * @param effectiveQuantity Calculated quantity when the expense type is &#39;Quantity&#39; or &#39;Invitations&#39; (number of attendees). (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder effectiveQuantity(Integer effectiveQuantity) {
            this.effectiveQuantity = effectiveQuantity;
            return this;
        }
        
        /**
         * Set attendees
         * @param attendees  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder attendees(ExpenseTempItemAttendees attendees) {
            this.attendees = attendees;
            return this;
        }
        
        /**
         * Set axisSections
         * @param axisSections Axis sections values. (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder axisSections(List<Object> axisSections) {
            this.axisSections = axisSections;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Values for custom fields. (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder customFields(Map<String, ExpenseTempItemCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set merchant
         * @param merchant Merchant of the expense. (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder merchant(Object merchant) {
            this.merchant = merchant;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder comment(Object comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set expenseReceipts
         * @param expenseReceipts The original receipt (PDF file, image, ...). (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder expenseReceipts(List<ExpenseReceipt> expenseReceipts) {
            this.expenseReceipts = expenseReceipts;
            return this;
        }
        
        /**
         * Set authorizedActions
         * @param authorizedActions  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder authorizedActions(ExpenseTempItemAuthorizedActions authorizedActions) {
            this.authorizedActions = authorizedActions;
            return this;
        }
        
        /**
         * Set sourceId
         * @param sourceId  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder sourceId(SourceId sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder source(ModelEnum source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set ownerId
         * @param ownerId Unique identifier of the user that made this expense. (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder ownerId(Integer ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set paymentMethodId
         * @param paymentMethodId  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder paymentMethodId(PaymentMethodId paymentMethodId) {
            this.paymentMethodId = paymentMethodId;
            return this;
        }
        
        /**
         * Set paymentMethod
         * @param paymentMethod  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder paymentMethod(ModelEnum paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }
        
        /**
         * Set statusId
         * @param statusId  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder statusId(StatusId statusId) {
            this.statusId = statusId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewTemporaryExpenseRequestBuilder
         */
        public CreateNewTemporaryExpenseRequestBuilder status(ModelEnum status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createNewTemporaryExpense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            return createNewTemporaryExpenseCall(expenseTempItem, _callback);
        }

        private ExpenseTempItem buildBodyParams() {
            ExpenseTempItem expenseTempItem = new ExpenseTempItem();
            expenseTempItem.id(this.id);
            expenseTempItem.purchasedOn(this.purchasedOn);
            expenseTempItem.originalTransaction(this.originalTransaction);
            expenseTempItem.processedAmounts(this.processedAmounts);
            expenseTempItem.expenseNatureId(this.expenseNatureId);
            expenseTempItem.mileage(this.mileage);
            expenseTempItem.quantity(this.quantity);
            expenseTempItem.effectiveQuantity(this.effectiveQuantity);
            expenseTempItem.attendees(this.attendees);
            expenseTempItem.axisSections(this.axisSections);
            expenseTempItem.customFields(this.customFields);
            expenseTempItem.merchant(this.merchant);
            expenseTempItem.comment(this.comment);
            expenseTempItem.expenseReceipts(this.expenseReceipts);
            expenseTempItem.authorizedActions(this.authorizedActions);
            expenseTempItem.sourceId(this.sourceId);
            expenseTempItem.source(this.source);
            expenseTempItem.ownerId(this.ownerId);
            expenseTempItem.paymentMethodId(this.paymentMethodId);
            expenseTempItem.paymentMethod(this.paymentMethod);
            expenseTempItem.statusId(this.statusId);
            expenseTempItem.status(this.status);
            return expenseTempItem;
        }

        /**
         * Execute createNewTemporaryExpense request
         * @return ExpensesCreateNewTemporaryExpenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpensesCreateNewTemporaryExpenseResponse execute() throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            ApiResponse<ExpensesCreateNewTemporaryExpenseResponse> localVarResp = createNewTemporaryExpenseWithHttpInfo(expenseTempItem);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTemporaryExpense request with HTTP info returned
         * @return ApiResponse&lt;ExpensesCreateNewTemporaryExpenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpensesCreateNewTemporaryExpenseResponse> executeWithHttpInfo() throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            return createNewTemporaryExpenseWithHttpInfo(expenseTempItem);
        }

        /**
         * Execute createNewTemporaryExpense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpensesCreateNewTemporaryExpenseResponse> _callback) throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            return createNewTemporaryExpenseAsync(expenseTempItem, _callback);
        }
    }

    /**
     * Create a new temporary expense
     * 
     * @return CreateNewTemporaryExpenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTemporaryExpenseRequestBuilder createNewTemporaryExpense(OffsetDateTime purchasedOn, Integer expenseNatureId) throws IllegalArgumentException {
        if (purchasedOn == null) throw new IllegalArgumentException("\"purchasedOn\" is required but got null");
        if (expenseNatureId == null) throw new IllegalArgumentException("\"expenseNatureId\" is required but got null");
        return new CreateNewTemporaryExpenseRequestBuilder(purchasedOn, expenseNatureId);
    }
    private okhttp3.Call getByIdCall(Integer expenseTempItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/expenseTempItems/{expenseTempItemId}"
            .replace("{" + "expenseTempItemId" + "}", localVarApiClient.escapeString(expenseTempItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer expenseTempItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseTempItemId' is set
        if (expenseTempItemId == null) {
            throw new ApiException("Missing the required parameter 'expenseTempItemId' when calling getById(Async)");
        }

        return getByIdCall(expenseTempItemId, _callback);

    }


    private ApiResponse<ExpensesGetByIdResponse> getByIdWithHttpInfo(Integer expenseTempItemId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(expenseTempItemId, null);
        Type localVarReturnType = new TypeToken<ExpensesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer expenseTempItemId, final ApiCallback<ExpensesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(expenseTempItemId, _callback);
        Type localVarReturnType = new TypeToken<ExpensesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer expenseTempItemId;

        private GetByIdRequestBuilder(Integer expenseTempItemId) {
            this.expenseTempItemId = expenseTempItemId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(expenseTempItemId, _callback);
        }


        /**
         * Execute getById request
         * @return ExpensesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpensesGetByIdResponse execute() throws ApiException {
            ApiResponse<ExpensesGetByIdResponse> localVarResp = getByIdWithHttpInfo(expenseTempItemId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ExpensesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpensesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(expenseTempItemId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpensesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(expenseTempItemId, _callback);
        }
    }

    /**
     * Get an ExpenseTempItem by id
     * 
     * @param expenseTempItemId Unique identifier of the ExpenseTempItem. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer expenseTempItemId) throws IllegalArgumentException {
        if (expenseTempItemId == null) throw new IllegalArgumentException("\"expenseTempItemId\" is required but got null");
        return new GetByIdRequestBuilder(expenseTempItemId);
    }
    private okhttp3.Call listTempItemsCall(String paging, List<Object> ownerId, String orderBy, String purchasedOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/expenseTempItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ownerId", ownerId));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (purchasedOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchasedOn", purchasedOn));
        }

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTempItemsValidateBeforeCall(String paging, List<Object> ownerId, String orderBy, String purchasedOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paging' is set
        if (paging == null) {
            throw new ApiException("Missing the required parameter 'paging' when calling listTempItems(Async)");
        }

        return listTempItemsCall(paging, ownerId, orderBy, purchasedOn, _callback);

    }


    private ApiResponse<ExpensesListTempItemsResponse> listTempItemsWithHttpInfo(String paging, List<Object> ownerId, String orderBy, String purchasedOn) throws ApiException {
        okhttp3.Call localVarCall = listTempItemsValidateBeforeCall(paging, ownerId, orderBy, purchasedOn, null);
        Type localVarReturnType = new TypeToken<ExpensesListTempItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTempItemsAsync(String paging, List<Object> ownerId, String orderBy, String purchasedOn, final ApiCallback<ExpensesListTempItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTempItemsValidateBeforeCall(paging, ownerId, orderBy, purchasedOn, _callback);
        Type localVarReturnType = new TypeToken<ExpensesListTempItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTempItemsRequestBuilder {
        private final String paging;
        private List<Object> ownerId;
        private String orderBy;
        private String purchasedOn;

        private ListTempItemsRequestBuilder(String paging) {
            this.paging = paging;
        }

        /**
         * Set ownerId
         * @param ownerId Comma-separated list of user identifiers (int). (optional)
         * @return ListTempItemsRequestBuilder
         */
        public ListTempItemsRequestBuilder ownerId(List<Object> ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy {fieldName},{&#39;asc&#39;||&#39;desc&#39;}. Example: &#x60;?orderby&#x3D;purchasedOn,desc&#x60; (optional)
         * @return ListTempItemsRequestBuilder
         */
        public ListTempItemsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set purchasedOn
         * @param purchasedOn Examples: &#x60;between,2022-01-01,202201-31&#x60;. (optional)
         * @return ListTempItemsRequestBuilder
         */
        public ListTempItemsRequestBuilder purchasedOn(String purchasedOn) {
            this.purchasedOn = purchasedOn;
            return this;
        }
        
        /**
         * Build call for listTempItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTempItemsCall(paging, ownerId, orderBy, purchasedOn, _callback);
        }


        /**
         * Execute listTempItems request
         * @return ExpensesListTempItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpensesListTempItemsResponse execute() throws ApiException {
            ApiResponse<ExpensesListTempItemsResponse> localVarResp = listTempItemsWithHttpInfo(paging, ownerId, orderBy, purchasedOn);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTempItems request with HTTP info returned
         * @return ApiResponse&lt;ExpensesListTempItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpensesListTempItemsResponse> executeWithHttpInfo() throws ApiException {
            return listTempItemsWithHttpInfo(paging, ownerId, orderBy, purchasedOn);
        }

        /**
         * Execute listTempItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpensesListTempItemsResponse> _callback) throws ApiException {
            return listTempItemsAsync(paging, ownerId, orderBy, purchasedOn, _callback);
        }
    }

    /**
     * List ExpenseTempItems (temporary expense)
     * Retrieve a list of &#x60;ExpenseTempItems&#x60;.  The &#x60;purchasedOn&#x60; query parameter can operate comparisons with a given date-time value: - &#x60;?purchasedOn&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?purchasedOn&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?purchasedOn&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?purchasedOn&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.
     * @param paging {offset},{limit}. Defaults to 0,1000. (required)
     * @return ListTempItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTempItemsRequestBuilder listTempItems(String paging) throws IllegalArgumentException {
        if (paging == null) throw new IllegalArgumentException("\"paging\" is required but got null");
            

        return new ListTempItemsRequestBuilder(paging);
    }
    private okhttp3.Call updateExpenseTempItemCall(Integer expenseTempItemId, ExpenseTempItem expenseTempItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseTempItem;

        // create path and map variables
        String localVarPath = "/api/v3/expenseTempItems/{expenseTempItemId}"
            .replace("{" + "expenseTempItemId" + "}", localVarApiClient.escapeString(expenseTempItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExpenseTempItemValidateBeforeCall(Integer expenseTempItemId, ExpenseTempItem expenseTempItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseTempItemId' is set
        if (expenseTempItemId == null) {
            throw new ApiException("Missing the required parameter 'expenseTempItemId' when calling updateExpenseTempItem(Async)");
        }

        return updateExpenseTempItemCall(expenseTempItemId, expenseTempItem, _callback);

    }


    private ApiResponse<ExpensesUpdateExpenseTempItemResponse> updateExpenseTempItemWithHttpInfo(Integer expenseTempItemId, ExpenseTempItem expenseTempItem) throws ApiException {
        okhttp3.Call localVarCall = updateExpenseTempItemValidateBeforeCall(expenseTempItemId, expenseTempItem, null);
        Type localVarReturnType = new TypeToken<ExpensesUpdateExpenseTempItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExpenseTempItemAsync(Integer expenseTempItemId, ExpenseTempItem expenseTempItem, final ApiCallback<ExpensesUpdateExpenseTempItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExpenseTempItemValidateBeforeCall(expenseTempItemId, expenseTempItem, _callback);
        Type localVarReturnType = new TypeToken<ExpensesUpdateExpenseTempItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExpenseTempItemRequestBuilder {
        private final OffsetDateTime purchasedOn;
        private final Integer expenseNatureId;
        private final Integer expenseTempItemId;
        private Integer id;
        private ExpenseTempItemOriginalTransaction originalTransaction;
        private ExpenseTempItemProcessedAmounts processedAmounts;
        private ExpenseTempItemMileage mileage;
        private Integer quantity;
        private Integer effectiveQuantity;
        private ExpenseTempItemAttendees attendees;
        private List<Object> axisSections;
        private Map<String, ExpenseTempItemCustomFieldsValue> customFields;
        private Object merchant;
        private Object comment;
        private List<ExpenseReceipt> expenseReceipts;
        private ExpenseTempItemAuthorizedActions authorizedActions;
        private SourceId sourceId;
        private ModelEnum source;
        private Integer ownerId;
        private PaymentMethodId paymentMethodId;
        private ModelEnum paymentMethod;
        private StatusId statusId;
        private ModelEnum status;

        private UpdateExpenseTempItemRequestBuilder(OffsetDateTime purchasedOn, Integer expenseNatureId, Integer expenseTempItemId) {
            this.purchasedOn = purchasedOn;
            this.expenseNatureId = expenseNatureId;
            this.expenseTempItemId = expenseTempItemId;
        }

        /**
         * Set id
         * @param id  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set originalTransaction
         * @param originalTransaction  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder originalTransaction(ExpenseTempItemOriginalTransaction originalTransaction) {
            this.originalTransaction = originalTransaction;
            return this;
        }
        
        /**
         * Set processedAmounts
         * @param processedAmounts  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder processedAmounts(ExpenseTempItemProcessedAmounts processedAmounts) {
            this.processedAmounts = processedAmounts;
            return this;
        }
        
        /**
         * Set mileage
         * @param mileage  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder mileage(ExpenseTempItemMileage mileage) {
            this.mileage = mileage;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity The quantity when the expense type is &#39;Quantity&#39;. (optional, default to 1)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set effectiveQuantity
         * @param effectiveQuantity Calculated quantity when the expense type is &#39;Quantity&#39; or &#39;Invitations&#39; (number of attendees). (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder effectiveQuantity(Integer effectiveQuantity) {
            this.effectiveQuantity = effectiveQuantity;
            return this;
        }
        
        /**
         * Set attendees
         * @param attendees  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder attendees(ExpenseTempItemAttendees attendees) {
            this.attendees = attendees;
            return this;
        }
        
        /**
         * Set axisSections
         * @param axisSections Axis sections values. (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder axisSections(List<Object> axisSections) {
            this.axisSections = axisSections;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Values for custom fields. (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder customFields(Map<String, ExpenseTempItemCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set merchant
         * @param merchant Merchant of the expense. (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder merchant(Object merchant) {
            this.merchant = merchant;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder comment(Object comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set expenseReceipts
         * @param expenseReceipts The original receipt (PDF file, image, ...). (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder expenseReceipts(List<ExpenseReceipt> expenseReceipts) {
            this.expenseReceipts = expenseReceipts;
            return this;
        }
        
        /**
         * Set authorizedActions
         * @param authorizedActions  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder authorizedActions(ExpenseTempItemAuthorizedActions authorizedActions) {
            this.authorizedActions = authorizedActions;
            return this;
        }
        
        /**
         * Set sourceId
         * @param sourceId  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder sourceId(SourceId sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder source(ModelEnum source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set ownerId
         * @param ownerId Unique identifier of the user that made this expense. (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder ownerId(Integer ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        
        /**
         * Set paymentMethodId
         * @param paymentMethodId  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder paymentMethodId(PaymentMethodId paymentMethodId) {
            this.paymentMethodId = paymentMethodId;
            return this;
        }
        
        /**
         * Set paymentMethod
         * @param paymentMethod  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder paymentMethod(ModelEnum paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }
        
        /**
         * Set statusId
         * @param statusId  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder statusId(StatusId statusId) {
            this.statusId = statusId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateExpenseTempItemRequestBuilder
         */
        public UpdateExpenseTempItemRequestBuilder status(ModelEnum status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateExpenseTempItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            return updateExpenseTempItemCall(expenseTempItemId, expenseTempItem, _callback);
        }

        private ExpenseTempItem buildBodyParams() {
            ExpenseTempItem expenseTempItem = new ExpenseTempItem();
            expenseTempItem.id(this.id);
            expenseTempItem.purchasedOn(this.purchasedOn);
            expenseTempItem.originalTransaction(this.originalTransaction);
            expenseTempItem.processedAmounts(this.processedAmounts);
            expenseTempItem.expenseNatureId(this.expenseNatureId);
            expenseTempItem.mileage(this.mileage);
            expenseTempItem.quantity(this.quantity);
            expenseTempItem.effectiveQuantity(this.effectiveQuantity);
            expenseTempItem.attendees(this.attendees);
            expenseTempItem.axisSections(this.axisSections);
            expenseTempItem.customFields(this.customFields);
            expenseTempItem.merchant(this.merchant);
            expenseTempItem.comment(this.comment);
            expenseTempItem.expenseReceipts(this.expenseReceipts);
            expenseTempItem.authorizedActions(this.authorizedActions);
            expenseTempItem.sourceId(this.sourceId);
            expenseTempItem.source(this.source);
            expenseTempItem.ownerId(this.ownerId);
            expenseTempItem.paymentMethodId(this.paymentMethodId);
            expenseTempItem.paymentMethod(this.paymentMethod);
            expenseTempItem.statusId(this.statusId);
            expenseTempItem.status(this.status);
            return expenseTempItem;
        }

        /**
         * Execute updateExpenseTempItem request
         * @return ExpensesUpdateExpenseTempItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpensesUpdateExpenseTempItemResponse execute() throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            ApiResponse<ExpensesUpdateExpenseTempItemResponse> localVarResp = updateExpenseTempItemWithHttpInfo(expenseTempItemId, expenseTempItem);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExpenseTempItem request with HTTP info returned
         * @return ApiResponse&lt;ExpensesUpdateExpenseTempItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpensesUpdateExpenseTempItemResponse> executeWithHttpInfo() throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            return updateExpenseTempItemWithHttpInfo(expenseTempItemId, expenseTempItem);
        }

        /**
         * Execute updateExpenseTempItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpensesUpdateExpenseTempItemResponse> _callback) throws ApiException {
            ExpenseTempItem expenseTempItem = buildBodyParams();
            return updateExpenseTempItemAsync(expenseTempItemId, expenseTempItem, _callback);
        }
    }

    /**
     * Update an ExpenseTempItem by id
     * 
     * @param expenseTempItemId Unique identifier of the ExpenseTempItem. (required)
     * @return UpdateExpenseTempItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExpenseTempItemRequestBuilder updateExpenseTempItem(OffsetDateTime purchasedOn, Integer expenseNatureId, Integer expenseTempItemId) throws IllegalArgumentException {
        if (purchasedOn == null) throw new IllegalArgumentException("\"purchasedOn\" is required but got null");
        if (expenseNatureId == null) throw new IllegalArgumentException("\"expenseNatureId\" is required but got null");
        if (expenseTempItemId == null) throw new IllegalArgumentException("\"expenseTempItemId\" is required but got null");
        return new UpdateExpenseTempItemRequestBuilder(purchasedOn, expenseNatureId, expenseTempItemId);
    }
}
