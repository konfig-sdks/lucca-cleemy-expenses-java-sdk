/*
 * Cleemy Expenses
 * Welcome on the documentation for the CleemyExpenses API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApprovalStateId;
import com.konfigthis.client.model.ClaimStatusId;
import com.konfigthis.client.model.Currency;
import com.konfigthis.client.model.EntityBase;
import com.konfigthis.client.model.ExpenseClaimAuthorizedActions;
import com.konfigthis.client.model.ModelEnum;
import com.konfigthis.client.model.Owner;
import com.konfigthis.client.model.PaymentMethodId;
import com.konfigthis.client.model.SourceId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * When a user wants to declare his expenses, he creates an &#x60;ExpenseClaim&#x60;.  An &#x60;ExpenseClaim&#x60; is created by regrouping one or more &#x60;ExpenseTempItems&#x60; and converting them into ExpenseClaimItems.  Once created, an &#x60;ExpenseClaim&#x60; has to be approved by his manager.  Multiple &#x60;ExpenseClaims&#x60; can be created through a single request.
 */
@ApiModel(description = "When a user wants to declare his expenses, he creates an `ExpenseClaim`.  An `ExpenseClaim` is created by regrouping one or more `ExpenseTempItems` and converting them into ExpenseClaimItems.  Once created, an `ExpenseClaim` has to be approved by his manager.  Multiple `ExpenseClaims` can be created through a single request.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExpenseClaim {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DECLARED_ON = "declaredOn";
  @SerializedName(SERIALIZED_NAME_DECLARED_ON)
  private OffsetDateTime declaredOn;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_PAYMENT_RECEIVED_ON = "paymentReceivedOn";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RECEIVED_ON)
  private OffsetDateTime paymentReceivedOn;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private SourceId sourceId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ModelEnum source;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "paymentMethodId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  private PaymentMethodId paymentMethodId;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private ModelEnum paymentMethod;

  public static final String SERIALIZED_NAME_STATUS_ID = "statusId";
  @SerializedName(SERIALIZED_NAME_STATUS_ID)
  private ClaimStatusId statusId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ModelEnum status;

  public static final String SERIALIZED_NAME_APPROVAL_STATE_ID = "approvalStateId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATE_ID)
  private ApprovalStateId approvalStateId;

  public static final String SERIALIZED_NAME_APPROVAL_STATE = "approvalState";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATE)
  private ModelEnum approvalState;

  public static final String SERIALIZED_NAME_AUTHORIZED_ACTIONS = "authorizedActions";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_ACTIONS)
  private ExpenseClaimAuthorizedActions authorizedActions;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private Integer ownerId;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private Owner owner;

  public static final String SERIALIZED_NAME_AUTHOR_ID = "authorId";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  private Integer authorId;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private EntityBase author;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "legalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "legalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private EntityBase legalEntity;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "departmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private EntityBase department;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public ExpenseClaim() {
  }

  
  public ExpenseClaim(
     Integer id, 
     OffsetDateTime declaredOn, 
     OffsetDateTime createdOn, 
     OffsetDateTime modifiedOn, 
     OffsetDateTime paymentReceivedOn, 
     Integer ownerId
  ) {
    this();
    this.id = id;
    this.declaredOn = declaredOn;
    this.createdOn = createdOn;
    this.modifiedOn = modifiedOn;
    this.paymentReceivedOn = paymentReceivedOn;
    this.ownerId = ownerId;
  }

   /**
   * Get id
   * minimum: 1
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public ExpenseClaim name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the expense claim. If empty, it will be generated with the month and year of the last of claim item.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the expense claim. If empty, it will be generated with the month and year of the last of claim item.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


   /**
   * Day the expenseClaim has been declared (Time zone Europe/Paris).
   * @return declaredOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Day the expenseClaim has been declared (Time zone Europe/Paris).")

  public OffsetDateTime getDeclaredOn() {
    return declaredOn;
  }




   /**
   * Day the expenseClaim has been created (Time zone Europe/Paris).
   * @return createdOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Day the expenseClaim has been created (Time zone Europe/Paris).")

  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }




   /**
   * Day the expenseClaim has been modified (Time zone Europe/Paris).
   * @return modifiedOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Day the expenseClaim has been modified (Time zone Europe/Paris).")

  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }




   /**
   * Day the expenseClaim has been paid (Time zone Europe/Paris).
   * @return paymentReceivedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Day the expenseClaim has been paid (Time zone Europe/Paris).")

  public OffsetDateTime getPaymentReceivedOn() {
    return paymentReceivedOn;
  }




  public ExpenseClaim sourceId(SourceId sourceId) {
    
    
    
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SourceId getSourceId() {
    return sourceId;
  }


  public void setSourceId(SourceId sourceId) {
    
    
    
    this.sourceId = sourceId;
  }


  public ExpenseClaim source(ModelEnum source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getSource() {
    return source;
  }


  public void setSource(ModelEnum source) {
    
    
    
    this.source = source;
  }


  public ExpenseClaim paymentMethodId(PaymentMethodId paymentMethodId) {
    
    
    
    
    this.paymentMethodId = paymentMethodId;
    return this;
  }

   /**
   * Get paymentMethodId
   * @return paymentMethodId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentMethodId getPaymentMethodId() {
    return paymentMethodId;
  }


  public void setPaymentMethodId(PaymentMethodId paymentMethodId) {
    
    
    
    this.paymentMethodId = paymentMethodId;
  }


  public ExpenseClaim paymentMethod(ModelEnum paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(ModelEnum paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


  public ExpenseClaim statusId(ClaimStatusId statusId) {
    
    
    
    
    this.statusId = statusId;
    return this;
  }

   /**
   * Get statusId
   * @return statusId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClaimStatusId getStatusId() {
    return statusId;
  }


  public void setStatusId(ClaimStatusId statusId) {
    
    
    
    this.statusId = statusId;
  }


  public ExpenseClaim status(ModelEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getStatus() {
    return status;
  }


  public void setStatus(ModelEnum status) {
    
    
    
    this.status = status;
  }


  public ExpenseClaim approvalStateId(ApprovalStateId approvalStateId) {
    
    
    
    
    this.approvalStateId = approvalStateId;
    return this;
  }

   /**
   * Get approvalStateId
   * @return approvalStateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApprovalStateId getApprovalStateId() {
    return approvalStateId;
  }


  public void setApprovalStateId(ApprovalStateId approvalStateId) {
    
    
    
    this.approvalStateId = approvalStateId;
  }


  public ExpenseClaim approvalState(ModelEnum approvalState) {
    
    
    
    
    this.approvalState = approvalState;
    return this;
  }

   /**
   * Get approvalState
   * @return approvalState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getApprovalState() {
    return approvalState;
  }


  public void setApprovalState(ModelEnum approvalState) {
    
    
    
    this.approvalState = approvalState;
  }


  public ExpenseClaim authorizedActions(ExpenseClaimAuthorizedActions authorizedActions) {
    
    
    
    
    this.authorizedActions = authorizedActions;
    return this;
  }

   /**
   * Get authorizedActions
   * @return authorizedActions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseClaimAuthorizedActions getAuthorizedActions() {
    return authorizedActions;
  }


  public void setAuthorizedActions(ExpenseClaimAuthorizedActions authorizedActions) {
    
    
    
    this.authorizedActions = authorizedActions;
  }


   /**
   * Unique identifier of the user that made this expenseClaim.
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the user that made this expenseClaim.")

  public Integer getOwnerId() {
    return ownerId;
  }




  public ExpenseClaim owner(Owner owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Owner getOwner() {
    return owner;
  }


  public void setOwner(Owner owner) {
    
    
    
    this.owner = owner;
  }


  public ExpenseClaim authorId(Integer authorId) {
    
    
    
    
    this.authorId = authorId;
    return this;
  }

   /**
   * Unique identifier of the user that created this grouping of expense.
   * @return authorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the user that created this grouping of expense.")

  public Integer getAuthorId() {
    return authorId;
  }


  public void setAuthorId(Integer authorId) {
    
    
    
    this.authorId = authorId;
  }


  public ExpenseClaim author(EntityBase author) {
    
    
    
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EntityBase getAuthor() {
    return author;
  }


  public void setAuthor(EntityBase author) {
    
    
    
    this.author = author;
  }


  public ExpenseClaim legalEntityId(Integer legalEntityId) {
    
    
    
    
    this.legalEntityId = legalEntityId;
    return this;
  }

   /**
   * Get legalEntityId
   * @return legalEntityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLegalEntityId() {
    return legalEntityId;
  }


  public void setLegalEntityId(Integer legalEntityId) {
    
    
    
    this.legalEntityId = legalEntityId;
  }


  public ExpenseClaim legalEntity(EntityBase legalEntity) {
    
    
    
    
    this.legalEntity = legalEntity;
    return this;
  }

   /**
   * Get legalEntity
   * @return legalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EntityBase getLegalEntity() {
    return legalEntity;
  }


  public void setLegalEntity(EntityBase legalEntity) {
    
    
    
    this.legalEntity = legalEntity;
  }


  public ExpenseClaim departmentId(Integer departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Get departmentId
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Integer departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public ExpenseClaim department(EntityBase department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EntityBase getDepartment() {
    return department;
  }


  public void setDepartment(EntityBase department) {
    
    
    
    this.department = department;
  }


  public ExpenseClaim currencyId(String currencyId) {
    
    
    
    
    this.currencyId = currencyId;
    return this;
  }

   /**
   * ISO code of the currency (eg: &#39;EUR&#39;, &#39;USD&#39;, &#39;GBP&#39;, ...).
   * @return currencyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GBP", value = "ISO code of the currency (eg: 'EUR', 'USD', 'GBP', ...).")

  public String getCurrencyId() {
    return currencyId;
  }


  public void setCurrencyId(String currencyId) {
    
    
    
    this.currencyId = currencyId;
  }


  public ExpenseClaim currency(Currency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    
    
    
    this.currency = currency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExpenseClaim instance itself
   */
  public ExpenseClaim putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseClaim expenseClaim = (ExpenseClaim) o;
    return Objects.equals(this.id, expenseClaim.id) &&
        Objects.equals(this.name, expenseClaim.name) &&
        Objects.equals(this.declaredOn, expenseClaim.declaredOn) &&
        Objects.equals(this.createdOn, expenseClaim.createdOn) &&
        Objects.equals(this.modifiedOn, expenseClaim.modifiedOn) &&
        Objects.equals(this.paymentReceivedOn, expenseClaim.paymentReceivedOn) &&
        Objects.equals(this.sourceId, expenseClaim.sourceId) &&
        Objects.equals(this.source, expenseClaim.source) &&
        Objects.equals(this.paymentMethodId, expenseClaim.paymentMethodId) &&
        Objects.equals(this.paymentMethod, expenseClaim.paymentMethod) &&
        Objects.equals(this.statusId, expenseClaim.statusId) &&
        Objects.equals(this.status, expenseClaim.status) &&
        Objects.equals(this.approvalStateId, expenseClaim.approvalStateId) &&
        Objects.equals(this.approvalState, expenseClaim.approvalState) &&
        Objects.equals(this.authorizedActions, expenseClaim.authorizedActions) &&
        Objects.equals(this.ownerId, expenseClaim.ownerId) &&
        Objects.equals(this.owner, expenseClaim.owner) &&
        Objects.equals(this.authorId, expenseClaim.authorId) &&
        Objects.equals(this.author, expenseClaim.author) &&
        Objects.equals(this.legalEntityId, expenseClaim.legalEntityId) &&
        Objects.equals(this.legalEntity, expenseClaim.legalEntity) &&
        Objects.equals(this.departmentId, expenseClaim.departmentId) &&
        Objects.equals(this.department, expenseClaim.department) &&
        Objects.equals(this.currencyId, expenseClaim.currencyId) &&
        Objects.equals(this.currency, expenseClaim.currency)&&
        Objects.equals(this.additionalProperties, expenseClaim.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, declaredOn, createdOn, modifiedOn, paymentReceivedOn, sourceId, source, paymentMethodId, paymentMethod, statusId, status, approvalStateId, approvalState, authorizedActions, ownerId, owner, authorId, author, legalEntityId, legalEntity, departmentId, department, currencyId, currency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseClaim {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    declaredOn: ").append(toIndentedString(declaredOn)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    paymentReceivedOn: ").append(toIndentedString(paymentReceivedOn)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    approvalStateId: ").append(toIndentedString(approvalStateId)).append("\n");
    sb.append("    approvalState: ").append(toIndentedString(approvalState)).append("\n");
    sb.append("    authorizedActions: ").append(toIndentedString(authorizedActions)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("declaredOn");
    openapiFields.add("createdOn");
    openapiFields.add("modifiedOn");
    openapiFields.add("paymentReceivedOn");
    openapiFields.add("sourceId");
    openapiFields.add("source");
    openapiFields.add("paymentMethodId");
    openapiFields.add("paymentMethod");
    openapiFields.add("statusId");
    openapiFields.add("status");
    openapiFields.add("approvalStateId");
    openapiFields.add("approvalState");
    openapiFields.add("authorizedActions");
    openapiFields.add("ownerId");
    openapiFields.add("owner");
    openapiFields.add("authorId");
    openapiFields.add("author");
    openapiFields.add("legalEntityId");
    openapiFields.add("legalEntity");
    openapiFields.add("departmentId");
    openapiFields.add("department");
    openapiFields.add("currencyId");
    openapiFields.add("currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("declaredOn");
    openapiRequiredFields.add("createdOn");
    openapiRequiredFields.add("modifiedOn");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExpenseClaim
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExpenseClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseClaim is not found in the empty JSON string", ExpenseClaim.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExpenseClaim.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `sourceId`
      if (jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) {
        SourceId.validateJsonObject(jsonObj.getAsJsonObject("sourceId"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("source"));
      }
      // validate the optional field `paymentMethod`
      if (jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("paymentMethod"));
      }
      // validate the optional field `statusId`
      if (jsonObj.get("statusId") != null && !jsonObj.get("statusId").isJsonNull()) {
        ClaimStatusId.validateJsonObject(jsonObj.getAsJsonObject("statusId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("status"));
      }
      // validate the optional field `approvalStateId`
      if (jsonObj.get("approvalStateId") != null && !jsonObj.get("approvalStateId").isJsonNull()) {
        ApprovalStateId.validateJsonObject(jsonObj.getAsJsonObject("approvalStateId"));
      }
      // validate the optional field `approvalState`
      if (jsonObj.get("approvalState") != null && !jsonObj.get("approvalState").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("approvalState"));
      }
      // validate the optional field `authorizedActions`
      if (jsonObj.get("authorizedActions") != null && !jsonObj.get("authorizedActions").isJsonNull()) {
        ExpenseClaimAuthorizedActions.validateJsonObject(jsonObj.getAsJsonObject("authorizedActions"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        Owner.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        EntityBase.validateJsonObject(jsonObj.getAsJsonObject("author"));
      }
      // validate the optional field `legalEntity`
      if (jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) {
        EntityBase.validateJsonObject(jsonObj.getAsJsonObject("legalEntity"));
      }
      // validate the optional field `department`
      if (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) {
        EntityBase.validateJsonObject(jsonObj.getAsJsonObject("department"));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseClaim>() {
           @Override
           public void write(JsonWriter out, ExpenseClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseClaim read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExpenseClaim instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExpenseClaim given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExpenseClaim
  * @throws IOException if the JSON string is invalid with respect to ExpenseClaim
  */
  public static ExpenseClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseClaim.class);
  }

 /**
  * Convert an instance of ExpenseClaim to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

