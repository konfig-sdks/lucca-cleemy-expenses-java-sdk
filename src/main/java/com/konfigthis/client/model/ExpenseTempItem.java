/*
 * Cleemy Expenses
 * Welcome on the documentation for the CleemyExpenses API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ExpenseReceipt;
import com.konfigthis.client.model.ExpenseTempItemAttendees;
import com.konfigthis.client.model.ExpenseTempItemAuthorizedActions;
import com.konfigthis.client.model.ExpenseTempItemCustomFieldsValue;
import com.konfigthis.client.model.ExpenseTempItemMileage;
import com.konfigthis.client.model.ExpenseTempItemOriginalTransaction;
import com.konfigthis.client.model.ExpenseTempItemProcessedAmounts;
import com.konfigthis.client.model.ModelEnum;
import com.konfigthis.client.model.PaymentMethodId;
import com.konfigthis.client.model.SourceId;
import com.konfigthis.client.model.StatusId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The &#x60;ExpenseTempItem&#x60;, or \&quot;temporary expense\&quot; is an expense that has not yet been declared (within an expense report) by its owner (the user who made the expense).
 */
@ApiModel(description = "The `ExpenseTempItem`, or \"temporary expense\" is an expense that has not yet been declared (within an expense report) by its owner (the user who made the expense).")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExpenseTempItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PURCHASED_ON = "purchasedOn";
  @SerializedName(SERIALIZED_NAME_PURCHASED_ON)
  private OffsetDateTime purchasedOn;

  public static final String SERIALIZED_NAME_ORIGINAL_TRANSACTION = "originalTransaction";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TRANSACTION)
  private ExpenseTempItemOriginalTransaction originalTransaction;

  public static final String SERIALIZED_NAME_PROCESSED_AMOUNTS = "processedAmounts";
  @SerializedName(SERIALIZED_NAME_PROCESSED_AMOUNTS)
  private ExpenseTempItemProcessedAmounts processedAmounts;

  public static final String SERIALIZED_NAME_EXPENSE_NATURE_ID = "expenseNatureId";
  @SerializedName(SERIALIZED_NAME_EXPENSE_NATURE_ID)
  private Integer expenseNatureId;

  public static final String SERIALIZED_NAME_MILEAGE = "mileage";
  @SerializedName(SERIALIZED_NAME_MILEAGE)
  private ExpenseTempItemMileage mileage;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity = 1;

  public static final String SERIALIZED_NAME_EFFECTIVE_QUANTITY = "effectiveQuantity";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_QUANTITY)
  private Integer effectiveQuantity;

  public static final String SERIALIZED_NAME_ATTENDEES = "attendees";
  @SerializedName(SERIALIZED_NAME_ATTENDEES)
  private ExpenseTempItemAttendees attendees;

  public static final String SERIALIZED_NAME_AXIS_SECTIONS = "axisSections";
  @SerializedName(SERIALIZED_NAME_AXIS_SECTIONS)
  private List<Object> axisSections = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, ExpenseTempItemCustomFieldsValue> customFields = null;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private Object merchant = null;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private Object comment = null;

  public static final String SERIALIZED_NAME_EXPENSE_RECEIPTS = "expenseReceipts";
  @SerializedName(SERIALIZED_NAME_EXPENSE_RECEIPTS)
  private List<ExpenseReceipt> expenseReceipts = null;

  public static final String SERIALIZED_NAME_AUTHORIZED_ACTIONS = "authorizedActions";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_ACTIONS)
  private ExpenseTempItemAuthorizedActions authorizedActions;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private SourceId sourceId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ModelEnum source;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private Integer ownerId;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "paymentMethodId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  private PaymentMethodId paymentMethodId;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private ModelEnum paymentMethod;

  public static final String SERIALIZED_NAME_STATUS_ID = "statusId";
  @SerializedName(SERIALIZED_NAME_STATUS_ID)
  private StatusId statusId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ModelEnum status;

  public ExpenseTempItem() {
  }

  
  public ExpenseTempItem(
     Integer id, 
     Integer effectiveQuantity
  ) {
    this();
    this.id = id;
    this.effectiveQuantity = effectiveQuantity;
  }

   /**
   * Get id
   * minimum: 1
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11022", value = "")

  public Integer getId() {
    return id;
  }




  public ExpenseTempItem purchasedOn(OffsetDateTime purchasedOn) {
    
    
    
    
    this.purchasedOn = purchasedOn;
    return this;
  }

   /**
   * Day the expense was made.
   * @return purchasedOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Day the expense was made.")

  public OffsetDateTime getPurchasedOn() {
    return purchasedOn;
  }


  public void setPurchasedOn(OffsetDateTime purchasedOn) {
    
    
    
    this.purchasedOn = purchasedOn;
  }


  public ExpenseTempItem originalTransaction(ExpenseTempItemOriginalTransaction originalTransaction) {
    
    
    
    
    this.originalTransaction = originalTransaction;
    return this;
  }

   /**
   * Get originalTransaction
   * @return originalTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseTempItemOriginalTransaction getOriginalTransaction() {
    return originalTransaction;
  }


  public void setOriginalTransaction(ExpenseTempItemOriginalTransaction originalTransaction) {
    
    
    
    this.originalTransaction = originalTransaction;
  }


  public ExpenseTempItem processedAmounts(ExpenseTempItemProcessedAmounts processedAmounts) {
    
    
    
    
    this.processedAmounts = processedAmounts;
    return this;
  }

   /**
   * Get processedAmounts
   * @return processedAmounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseTempItemProcessedAmounts getProcessedAmounts() {
    return processedAmounts;
  }


  public void setProcessedAmounts(ExpenseTempItemProcessedAmounts processedAmounts) {
    
    
    
    this.processedAmounts = processedAmounts;
  }


  public ExpenseTempItem expenseNatureId(Integer expenseNatureId) {
    if (expenseNatureId != null && expenseNatureId < 1) {
      throw new IllegalArgumentException("Invalid value for expenseNatureId. Must be greater than or equal to 1.");
    }
    
    
    
    this.expenseNatureId = expenseNatureId;
    return this;
  }

   /**
   * Nature of the expense: Meals, Train, Taxi, Hotels, Taxi, Mileage... List depends on the app configuration.
   * minimum: 1
   * @return expenseNatureId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "Nature of the expense: Meals, Train, Taxi, Hotels, Taxi, Mileage... List depends on the app configuration.")

  public Integer getExpenseNatureId() {
    return expenseNatureId;
  }


  public void setExpenseNatureId(Integer expenseNatureId) {
    if (expenseNatureId != null && expenseNatureId < 1) {
      throw new IllegalArgumentException("Invalid value for expenseNatureId. Must be greater than or equal to 1.");
    }
    
    
    this.expenseNatureId = expenseNatureId;
  }


  public ExpenseTempItem mileage(ExpenseTempItemMileage mileage) {
    
    
    
    
    this.mileage = mileage;
    return this;
  }

   /**
   * Get mileage
   * @return mileage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseTempItemMileage getMileage() {
    return mileage;
  }


  public void setMileage(ExpenseTempItemMileage mileage) {
    
    
    
    this.mileage = mileage;
  }


  public ExpenseTempItem quantity(Integer quantity) {
    if (quantity != null && quantity < 1) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 1.");
    }
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity when the expense type is &#39;Quantity&#39;.
   * minimum: 1
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The quantity when the expense type is 'Quantity'.")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    if (quantity != null && quantity < 1) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 1.");
    }
    
    
    this.quantity = quantity;
  }


   /**
   * Calculated quantity when the expense type is &#39;Quantity&#39; or &#39;Invitations&#39; (number of attendees).
   * minimum: 1
   * @return effectiveQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "Calculated quantity when the expense type is 'Quantity' or 'Invitations' (number of attendees).")

  public Integer getEffectiveQuantity() {
    return effectiveQuantity;
  }




  public ExpenseTempItem attendees(ExpenseTempItemAttendees attendees) {
    
    
    
    
    this.attendees = attendees;
    return this;
  }

   /**
   * Get attendees
   * @return attendees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseTempItemAttendees getAttendees() {
    return attendees;
  }


  public void setAttendees(ExpenseTempItemAttendees attendees) {
    
    
    
    this.attendees = attendees;
  }


  public ExpenseTempItem axisSections(List<Object> axisSections) {
    
    
    
    
    this.axisSections = axisSections;
    return this;
  }

  public ExpenseTempItem addAxisSectionsItem(Object axisSectionsItem) {
    if (this.axisSections == null) {
      this.axisSections = new ArrayList<>();
    }
    this.axisSections.add(axisSectionsItem);
    return this;
  }

   /**
   * Axis sections values.
   * @return axisSections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Axis sections values.")

  public List<Object> getAxisSections() {
    return axisSections;
  }


  public void setAxisSections(List<Object> axisSections) {
    
    
    
    this.axisSections = axisSections;
  }


  public ExpenseTempItem customFields(Map<String, ExpenseTempItemCustomFieldsValue> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public ExpenseTempItem putCustomFieldsItem(String key, ExpenseTempItemCustomFieldsValue customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * Values for custom fields.
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Values for custom fields.")

  public Map<String, ExpenseTempItemCustomFieldsValue> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, ExpenseTempItemCustomFieldsValue> customFields) {
    
    
    
    this.customFields = customFields;
  }


  public ExpenseTempItem merchant(Object merchant) {
    
    
    
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Merchant of the expense.
   * @return merchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant of the expense.")

  public Object getMerchant() {
    return merchant;
  }


  public void setMerchant(Object merchant) {
    
    
    
    this.merchant = merchant;
  }


  public ExpenseTempItem comment(Object comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getComment() {
    return comment;
  }


  public void setComment(Object comment) {
    
    
    
    this.comment = comment;
  }


  public ExpenseTempItem expenseReceipts(List<ExpenseReceipt> expenseReceipts) {
    
    
    
    
    this.expenseReceipts = expenseReceipts;
    return this;
  }

  public ExpenseTempItem addExpenseReceiptsItem(ExpenseReceipt expenseReceiptsItem) {
    if (this.expenseReceipts == null) {
      this.expenseReceipts = new ArrayList<>();
    }
    this.expenseReceipts.add(expenseReceiptsItem);
    return this;
  }

   /**
   * The original receipt (PDF file, image, ...).
   * @return expenseReceipts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original receipt (PDF file, image, ...).")

  public List<ExpenseReceipt> getExpenseReceipts() {
    return expenseReceipts;
  }


  public void setExpenseReceipts(List<ExpenseReceipt> expenseReceipts) {
    
    
    
    this.expenseReceipts = expenseReceipts;
  }


  public ExpenseTempItem authorizedActions(ExpenseTempItemAuthorizedActions authorizedActions) {
    
    
    
    
    this.authorizedActions = authorizedActions;
    return this;
  }

   /**
   * Get authorizedActions
   * @return authorizedActions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseTempItemAuthorizedActions getAuthorizedActions() {
    return authorizedActions;
  }


  public void setAuthorizedActions(ExpenseTempItemAuthorizedActions authorizedActions) {
    
    
    
    this.authorizedActions = authorizedActions;
  }


  public ExpenseTempItem sourceId(SourceId sourceId) {
    
    
    
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SourceId getSourceId() {
    return sourceId;
  }


  public void setSourceId(SourceId sourceId) {
    
    
    
    this.sourceId = sourceId;
  }


  public ExpenseTempItem source(ModelEnum source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getSource() {
    return source;
  }


  public void setSource(ModelEnum source) {
    
    
    
    this.source = source;
  }


  public ExpenseTempItem ownerId(Integer ownerId) {
    
    
    
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * Unique identifier of the user that made this expense.
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "361", value = "Unique identifier of the user that made this expense.")

  public Integer getOwnerId() {
    return ownerId;
  }


  public void setOwnerId(Integer ownerId) {
    
    
    
    this.ownerId = ownerId;
  }


  public ExpenseTempItem paymentMethodId(PaymentMethodId paymentMethodId) {
    
    
    
    
    this.paymentMethodId = paymentMethodId;
    return this;
  }

   /**
   * Get paymentMethodId
   * @return paymentMethodId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentMethodId getPaymentMethodId() {
    return paymentMethodId;
  }


  public void setPaymentMethodId(PaymentMethodId paymentMethodId) {
    
    
    
    this.paymentMethodId = paymentMethodId;
  }


  public ExpenseTempItem paymentMethod(ModelEnum paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(ModelEnum paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


  public ExpenseTempItem statusId(StatusId statusId) {
    
    
    
    
    this.statusId = statusId;
    return this;
  }

   /**
   * Get statusId
   * @return statusId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusId getStatusId() {
    return statusId;
  }


  public void setStatusId(StatusId statusId) {
    
    
    
    this.statusId = statusId;
  }


  public ExpenseTempItem status(ModelEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelEnum getStatus() {
    return status;
  }


  public void setStatus(ModelEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExpenseTempItem instance itself
   */
  public ExpenseTempItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseTempItem expenseTempItem = (ExpenseTempItem) o;
    return Objects.equals(this.id, expenseTempItem.id) &&
        Objects.equals(this.purchasedOn, expenseTempItem.purchasedOn) &&
        Objects.equals(this.originalTransaction, expenseTempItem.originalTransaction) &&
        Objects.equals(this.processedAmounts, expenseTempItem.processedAmounts) &&
        Objects.equals(this.expenseNatureId, expenseTempItem.expenseNatureId) &&
        Objects.equals(this.mileage, expenseTempItem.mileage) &&
        Objects.equals(this.quantity, expenseTempItem.quantity) &&
        Objects.equals(this.effectiveQuantity, expenseTempItem.effectiveQuantity) &&
        Objects.equals(this.attendees, expenseTempItem.attendees) &&
        Objects.equals(this.axisSections, expenseTempItem.axisSections) &&
        Objects.equals(this.customFields, expenseTempItem.customFields) &&
        Objects.equals(this.merchant, expenseTempItem.merchant) &&
        Objects.equals(this.comment, expenseTempItem.comment) &&
        Objects.equals(this.expenseReceipts, expenseTempItem.expenseReceipts) &&
        Objects.equals(this.authorizedActions, expenseTempItem.authorizedActions) &&
        Objects.equals(this.sourceId, expenseTempItem.sourceId) &&
        Objects.equals(this.source, expenseTempItem.source) &&
        Objects.equals(this.ownerId, expenseTempItem.ownerId) &&
        Objects.equals(this.paymentMethodId, expenseTempItem.paymentMethodId) &&
        Objects.equals(this.paymentMethod, expenseTempItem.paymentMethod) &&
        Objects.equals(this.statusId, expenseTempItem.statusId) &&
        Objects.equals(this.status, expenseTempItem.status)&&
        Objects.equals(this.additionalProperties, expenseTempItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, purchasedOn, originalTransaction, processedAmounts, expenseNatureId, mileage, quantity, effectiveQuantity, attendees, axisSections, customFields, merchant, comment, expenseReceipts, authorizedActions, sourceId, source, ownerId, paymentMethodId, paymentMethod, statusId, status, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseTempItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    purchasedOn: ").append(toIndentedString(purchasedOn)).append("\n");
    sb.append("    originalTransaction: ").append(toIndentedString(originalTransaction)).append("\n");
    sb.append("    processedAmounts: ").append(toIndentedString(processedAmounts)).append("\n");
    sb.append("    expenseNatureId: ").append(toIndentedString(expenseNatureId)).append("\n");
    sb.append("    mileage: ").append(toIndentedString(mileage)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    effectiveQuantity: ").append(toIndentedString(effectiveQuantity)).append("\n");
    sb.append("    attendees: ").append(toIndentedString(attendees)).append("\n");
    sb.append("    axisSections: ").append(toIndentedString(axisSections)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    expenseReceipts: ").append(toIndentedString(expenseReceipts)).append("\n");
    sb.append("    authorizedActions: ").append(toIndentedString(authorizedActions)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("purchasedOn");
    openapiFields.add("originalTransaction");
    openapiFields.add("processedAmounts");
    openapiFields.add("expenseNatureId");
    openapiFields.add("mileage");
    openapiFields.add("quantity");
    openapiFields.add("effectiveQuantity");
    openapiFields.add("attendees");
    openapiFields.add("axisSections");
    openapiFields.add("customFields");
    openapiFields.add("merchant");
    openapiFields.add("comment");
    openapiFields.add("expenseReceipts");
    openapiFields.add("authorizedActions");
    openapiFields.add("sourceId");
    openapiFields.add("source");
    openapiFields.add("ownerId");
    openapiFields.add("paymentMethodId");
    openapiFields.add("paymentMethod");
    openapiFields.add("statusId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("purchasedOn");
    openapiRequiredFields.add("expenseNatureId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExpenseTempItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExpenseTempItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseTempItem is not found in the empty JSON string", ExpenseTempItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExpenseTempItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `originalTransaction`
      if (jsonObj.get("originalTransaction") != null && !jsonObj.get("originalTransaction").isJsonNull()) {
        ExpenseTempItemOriginalTransaction.validateJsonObject(jsonObj.getAsJsonObject("originalTransaction"));
      }
      // validate the optional field `processedAmounts`
      if (jsonObj.get("processedAmounts") != null && !jsonObj.get("processedAmounts").isJsonNull()) {
        ExpenseTempItemProcessedAmounts.validateJsonObject(jsonObj.getAsJsonObject("processedAmounts"));
      }
      // validate the optional field `mileage`
      if (jsonObj.get("mileage") != null && !jsonObj.get("mileage").isJsonNull()) {
        ExpenseTempItemMileage.validateJsonObject(jsonObj.getAsJsonObject("mileage"));
      }
      // validate the optional field `attendees`
      if (jsonObj.get("attendees") != null && !jsonObj.get("attendees").isJsonNull()) {
        ExpenseTempItemAttendees.validateJsonObject(jsonObj.getAsJsonObject("attendees"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("axisSections") != null && !jsonObj.get("axisSections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `axisSections` to be an array in the JSON string but got `%s`", jsonObj.get("axisSections").toString()));
      }
      if (jsonObj.get("expenseReceipts") != null && !jsonObj.get("expenseReceipts").isJsonNull()) {
        JsonArray jsonArrayexpenseReceipts = jsonObj.getAsJsonArray("expenseReceipts");
        if (jsonArrayexpenseReceipts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expenseReceipts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expenseReceipts` to be an array in the JSON string but got `%s`", jsonObj.get("expenseReceipts").toString()));
          }

          // validate the optional field `expenseReceipts` (array)
          for (int i = 0; i < jsonArrayexpenseReceipts.size(); i++) {
            ExpenseReceipt.validateJsonObject(jsonArrayexpenseReceipts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `authorizedActions`
      if (jsonObj.get("authorizedActions") != null && !jsonObj.get("authorizedActions").isJsonNull()) {
        ExpenseTempItemAuthorizedActions.validateJsonObject(jsonObj.getAsJsonObject("authorizedActions"));
      }
      // validate the optional field `sourceId`
      if (jsonObj.get("sourceId") != null && !jsonObj.get("sourceId").isJsonNull()) {
        SourceId.validateJsonObject(jsonObj.getAsJsonObject("sourceId"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("source"));
      }
      // validate the optional field `paymentMethod`
      if (jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("paymentMethod"));
      }
      // validate the optional field `statusId`
      if (jsonObj.get("statusId") != null && !jsonObj.get("statusId").isJsonNull()) {
        StatusId.validateJsonObject(jsonObj.getAsJsonObject("statusId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ModelEnum.validateJsonObject(jsonObj.getAsJsonObject("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseTempItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseTempItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseTempItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseTempItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseTempItem>() {
           @Override
           public void write(JsonWriter out, ExpenseTempItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseTempItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExpenseTempItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExpenseTempItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExpenseTempItem
  * @throws IOException if the JSON string is invalid with respect to ExpenseTempItem
  */
  public static ExpenseTempItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseTempItem.class);
  }

 /**
  * Convert an instance of ExpenseTempItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

